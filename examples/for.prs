
; An example of a syntatic form that might be defined in Parus
; this implements a for-like looping structure
; this examples though recursive runs in constant space using the recall optimization

; redefines a symbol
(
	dpl delete
	define
) 'redef define

( 
	'for_fn 	define ; bind the function
	'for_i 		define ; bind the increment amount
	'for_cmp 	define ; symbol to comparator function
	'for_b 		define ; bind the end value
	'for_a 		define ; bind the start value

	quotate 'for_sym define ; bind the symbol that represent the iterator

	; For example 
	; if the iterator symbol is i the for_sym means i 
	; and for_sym ! means the value of i

	for_a for_sym define ; bind start value to iterator
	
	( 
		for_sym ! for_b for_cmp
		; call the function, then redefine the iterator as iterator + for_i, then iterate again 
		(for_fn for_sym ! for_i + for_sym redef for_helper)
		; delete the iterator
		(for_sym delete) if !
	) 'for_helper define
	
	for_helper
	
	; delete everything the for used
	'for_helper delete
	'for_fn 	delete
	'for_i 		delete
	'for_cmp 	delete
	'for_b 		delete
	'for_a 		delete
	'for_sym 	delete

) 'for define

(> 0 1 if) '<= define

'a 1 10 '<= 1 (a outln) for 
